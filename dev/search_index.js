var documenterSearchIndex = {"docs":
[{"location":"#ConstructionBase.jl-1","page":"Home","title":"ConstructionBase.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [ConstructionBase]","category":"page"},{"location":"#ConstructionBase.constructorof-Union{Tuple{Type{T}}, Tuple{T}} where T","page":"Home","title":"ConstructionBase.constructorof","text":"constructorof(T::Type)\n\nReturn an object ctor that can be used to construct objects of type T from their field values. Typically ctor will be the type T with all parameters removed:\n\njulia> using ConstructionBase\n\njulia> struct T{A,B}\n           a::A\n           b::B\n       end\n\njulia> constructorof(T{Int,Int})\nT\n\nIt is however not guaranteed, that ctor is a type at all:\n\njulia> struct S\n           a\n           b\n           checksum\n           S(a,b) = new(a,b,a+b)\n       end\n\njulia> ConstructionBase.constructorof(::Type{<:S}) =\n           (a, b, checksum=a+b) -> (@assert a+b == checksum; S(a,b))\n\njulia> constructorof(S)(1,2)\nS(1, 2, 3)\n\njulia> constructorof(S)(1,2,4)\nERROR: AssertionError: a + b == checksum\n\nInstead ctor can be any object that satisfies the following properties:\n\nIt must be possible to reconstruct an object from its fields:\n\nctor = constructorof(typeof(obj))\n@assert obj == ctor(fieldvalues(obj)...)\n@assert typeof(obj) == typeof(ctor(fieldvalues(obj)...))\n\nThe other direction should hold for as many values of args as possible:\n\nctor = constructorof(T)\nfieldvalues(ctor(args...)) == args\n\nFor instance given a suitable parametric type it should be possible to change the type of its fields:\n\njulia> struct T{A,B}\n           a::A\n           b::B\n       end\n\njulia> t = T(1,2)\nT{Int64,Int64}(1, 2)\n\njulia> constructorof(typeof(t))(1.0, 2)\nT{Float64,Int64}(1.0, 2)\n\njulia> constructorof(typeof(t))(10, 2)\nT{Int64,Int64}(10, 2)\n\n\n\n\n\n","category":"method"},{"location":"#ConstructionBase.setproperties","page":"Home","title":"ConstructionBase.setproperties","text":"setproperties(obj, patch::NamedTuple)\n\nReturn a copy of obj with attributes updates accoring to patch.\n\nExamples\n\njulia> using ConstructionBase\n\njulia> struct S\n           a\n           b\n           c\n       end\n\njulia> s = S(1,2,3)\nS(1, 2, 3)\n\njulia> setproperties(s, (a=10,c=4))\nS(10, 2, 4)\n\njulia> setproperties((a=1,c=2,b=3), (a=10,c=4))\n(a = 10, c = 4, b = 3)\n\nThere is also a convenience method, which builds the patch argument from keywords:\n\nsetproperties(obj; kw...)\n\nExamples\n\njulia> using ConstructionBase\n\njulia> struct S;a;b;c; end\n\njulia> o = S(10, 2, 4)\nS(10, 2, 4)\n\njulia> setproperties(o, a=\"A\", c=\"cc\")\nS(\"A\", 2, \"cc\")\n\nOverloading\n\nWARNING The signature setproperties(obj::MyType; kw...) should never be overloaded. Instead setproperties(obj::MyType, patch::NamedTuple) should be overloaded.\n\n\n\n\n\n","category":"function"}]
}
